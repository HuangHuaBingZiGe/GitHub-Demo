# 匿名函数


def ds(x):
    return 2 * x + 1


print('----------------------------------------------')
print(ds(3))
print('----------------------------------------------')

g = lambda x: 2 * x + 1
print(g(5))
print('----------------------------------------------')


def add(x, y):
    return x + y


print(add(3, 4))
print('----------------------------------------------')

g = lambda x, y: x + y
print(g(3, 6))
print('----------------------------------------------')

"""
lambda 表达式的作用：
    
    ——Python写一些执行脚本时，使用lambda就可以省下定义函数过程，比如说我们只是需要写个简单的脚本来管理服务器时间，我们就不需要专门定义一个函数然后再写调用，使用lambda就可以使得代码更加精简。
    
    ——对于一些比较抽象并且整个程序执行下来只需要调用一两次的函数，有时候给函数起个名字也是比较头疼的问题，使用lambda就不需要考虑命名的问题了。
    
    ——简化代码的可读性，由于普通的函数阅读经常要跳到开头def定义部分，使用lambda函数可以省去这样的步骤。
    
"""

# 两个牛逼的 BIF
"""
filter：把非true的元素过滤掉
"""

print(help(filter))
print('--------------------------------------------------')

print(filter(None, [1, 0, False, True]))
print('--------------------------------------------------')

print(list(filter(None, [1, 0, False, True])))
print('--------------------------------------------------')


def odd(x):
    return x % 2


temp = range(10)
print(list(temp))
show = filter(odd, temp)
print(list(show))
print('--------------------------------------------------')

print(list(filter(lambda x: x % 2, range(10))))
print('--------------------------------------------------')

print(list(map(lambda x: x * 2, range(10))))
print('--------------------------------------------------')
