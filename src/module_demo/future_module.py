#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
---------------------------------------------------------------------------------------------

#   在旧版本中使用新版本的特性，可以使用__future__模块，对于兼容性的考虑

---------------------------------------------------------------------------------------------

#   从2.7到3.x就有一些不兼容的改动，比如 2.x的字符串用'xxx'表示，unicode字符串用u'xxx'表示unicode,而 3.x中，所有的字符串都被视为unicode，因此，写u'xxx'和'xxx'是完全一致的，而在2.x中以'xxx'表示的str就必须写成b'xxx'，以此表示“二进制字符串”

---------------------------------------------------------------------------------------------

#   要直接把代码升级到3.x是比较冒进的，因为有大量的改动需要测试。相反，可以在2.7版本中先在一部分代码中测试一些3.x的特性，如果没有问题，再移植到3.x不迟

#   Python提供了__future__模块，把下一个新版本的特性导入到当前版本，于是我们就可以在当前版本中测试一些新版本的特性

---------------------------------------------------------------------------------------------

#   为了适应Python 3.x的新的字符串的表示方法，在2.7版本的代码中，可以通过unicode_literals来使用Python 3.x的新的语法

from __future__ import unicode_literals

print '\'xxx\' is unicode?', isinstance('xxx', unicode)
print 'u\'xxx\' is unicode?', isinstance(u'xxx', unicode)
print '\'xxx\' is str?', isinstance('xxx', str)
print 'b\'xxx\' is str?', isinstance(b'xxx', str)

---------------------------------------------------------------------------------------------

#   类似的情况还有：除法运算， 2.x中，对于除法有2种情况，如果整数相除，结果仍是整数，余数会被扔掉，这叫“地板除”

10/3
3

#   要做精确除法，必须把其中一个数变为浮点数

10.0 /3
3.3333333333333335

---------------------------------------------------------------------------------------------

#   在python3.x中，所有的除法都是精确除法，地板除用//表示

10 / 3
3.3333333333333335

10  // 3
3

---------------------------------------------------------------------------------------------

#   要想在2.7中直接使用3.x的除法，可以通过__future__模块的division实现

from __future__ import division

print '10 / 3 =', 10 / 3
print '10.0 / 3 =', 10.0 / 3
print '10 // 3 =', 10 // 3

---------------------------------------------------------------------------------------------

"""
